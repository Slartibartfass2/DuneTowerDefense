buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        gradlePluginPortal()
        google()
    }

    dependencies {
        classpath "com.badlogicgames.gdx:gdx-ai:1.8.2"
    }
}

plugins {
    id 'java'
    id 'org.barfuin.gradle.jacocolog' version '2.0.0'
    id 'checkstyle'
}

allprojects {
    apply plugin: "eclipse"
    apply plugin: "java"
    apply plugin: "jacoco"

    version = '1.0'
    ext {
        appName = "DuneTD"
        gdxVersion = '1.11.0'
        gdxControllersVersion = '2.1.0'
        roboVMVersion = '2.3.12'
        box2DLightsVersion = '1.5'
        ashleyVersion = '1.7.3'
        aiVersion = '1.8.2'
        // gdx gltf
        gltfVersion = '-SNAPSHOT'
        // SpaiR/imgui-java related
        lwjglVersion = '3.2.3'
        imguiVersion = '1.84.1.4'
        lombokVersion = '1.18.22'
        visuiVersion = '1.5.0'
        jUnitVersion = '5.9.1'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
        google()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        implementation 'org.jetbrains:annotations:23.0.0'
    }
}

project(":desktop") {
    apply plugin: "java-library"

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation project(":core")
        api "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
        api "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        api "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
        api "com.badlogicgames.gdx:gdx-bullet-platform:$gdxVersion:natives-desktop"
        api "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
        api "com.badlogicgames.gdx:gdx-tools:$gdxVersion"
        api "com.badlogicgames.gdx-controllers:gdx-controllers-desktop:$gdxControllersVersion"
    }

    jar {
        dependsOn(":core:jar")

        manifest {
            attributes(
                'Main-Class': 'io.swapastack.dunetd.desktop.DesktopLauncher'
            )
        }

        from {
            setDuplicatesStrategy(DuplicatesStrategy.EXCLUDE)
            configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
        }
    }
}

project(":core") {
    apply plugin: "java-library"

    repositories {
        mavenCentral()
    }

    dependencies {
        // JUnit
        implementation "org.junit.jupiter:junit-jupiter:$jUnitVersion"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$jUnitVersion"

        api "com.badlogicgames.gdx:gdx:$gdxVersion"
        api "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
        api "com.badlogicgames.gdx:gdx-bullet:$gdxVersion"
        api "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
        api "com.badlogicgames.box2dlights:box2dlights:$box2DLightsVersion"
        api "com.badlogicgames.gdx-controllers:gdx-controllers-core:$gdxControllersVersion"
        implementation "com.badlogicgames.gdx:gdx-ai:$aiVersion"

        // Lombok
        compileOnly "org.projectlombok:lombok:$lombokVersion"
        annotationProcessor "org.projectlombok:lombok:$lombokVersion"
        testCompileOnly "org.projectlombok:lombok:$lombokVersion"
        testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

        // VisUI
        implementation "com.kotcrab.vis:vis-ui:$visuiVersion"

        // google/gson
        implementation 'com.google.code.gson:gson:2.8.9'

        // gdx gltf
        api "com.github.mgsx-dev.gdx-gltf:gltf:$gltfVersion"

        // SpaiR/imgui-java related
        api "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
        implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")
        ['', '-opengl', '-glfw'].each {
            implementation "org.lwjgl:lwjgl$it:$lwjglVersion"
            implementation "org.lwjgl:lwjgl$it::natives-windows"
            implementation "org.lwjgl:lwjgl$it::natives-windows-x86"
            implementation "org.lwjgl:lwjgl$it::natives-linux"
            implementation "org.lwjgl:lwjgl$it::natives-macos"
        }

        implementation "io.github.spair:imgui-java-binding:$imguiVersion"
        implementation "io.github.spair:imgui-java-lwjgl3:$imguiVersion"
        implementation "io.github.spair:imgui-java-natives-windows:$imguiVersion"
        implementation "io.github.spair:imgui-java-natives-linux:$imguiVersion"
        implementation "io.github.spair:imgui-java-natives-macos:$imguiVersion"
    }

    jar {}

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    jacoco {
        toolVersion = "0.8.6"
    }

    jacocoTestReport {
        dependsOn test

        reports {
            xml.required = true
            csv.required = false
            html.required = true
        }

        afterEvaluate {
            getClassDirectories().setFrom(classDirectories.files.collect {
                fileTree(dir: it, excludes: [
                        '**/*Test*',
                        'io/swapastack/dunetd/assets/**',
                        'io/swapastack/dunetd/screens/**',
                        'io/swapastack/dunetd/hud/**',
                ])
            })
        }
    }

    jacocoAggregatedReport {
        dependsOn jacocoTestReport
    }

    jacocoTestCoverageVerification {
        dependsOn jacocoTestReport

        violationRules {
            rule {
                limit {
                    minimum = 0.6
                }

                failOnViolation true
            }
        }
    }
}

checkstyle {
    toolVersion = '10.5.0'
    configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")

    checkstyleMain {
        source = 'core/src/io/swapastack/dunetd'
    }

    checkstyleTest {
        source = 'core/src/test/java/io/swapastack/dunetd'
    }
}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.enabled false
        html.enabled true
    }
}
